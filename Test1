clear 
clc
close all

%% Data parameters
Fs = 1000;
Experiment_Time = 600; %600 seconds = 10 minutes
cd 'C:\Users\Galdino\OneDrive\Mestrado Neuroengenharia\Dissertação\Experimento 2 - Eletrofisiologia\Analise_Mania_Eletrofisio'

%% Import Baseline SAL Data
cd ./Baseline_SAL
[File,PathName,FilterIndex] = uigetfile({'*.*','mat(*.*)'}, 'Select SAL Baseline file','MultiSelect','on');
data = [PathName File];
nanimais_SAL=length(File);

%Create a structure based on the parameters defined above
for i=1:nanimais_SAL
    Baseline_Data(i)=importdata([PathName File{:,i}]);
end
clear File PathName FilterIndex data i


%Loop to create 300 windows containing 2s data
for i=1:nanimais_SAL
    Start=1;
    End=2000;
    j=2000;
    for k=1:(Experiment_Time/2) %Where Experiment_Time is the duration of 
        %the electrophysiological data and 2 is the window determined to windowing
        %Each line is a 2s window
        Baseline_Segmented(i).PRL(k,:)=Baseline_Data(i).AD01(Start:End,:);
        Baseline_Segmented(i).NAC(k,:)=Baseline_Data(i).AD02(Start:End,:);
        Baseline_Segmented(i).VTA(k,:)=Baseline_Data(i).AD03(Start:End,:);
        Baseline_Segmented(i).BLA(k,:)=Baseline_Data(i).AD04(Start:End,:);
        Baseline_Segmented(i).HV(k,:)=Baseline_Data(i).AD05(Start:End,:);
        Start=Start+j;
        End=End+j;
    end
end
clear Start End i j k 

for i=1:nanimais_SAL
    for j=1:(Experiment_Time/2)
        if max((Baseline_Segmented(i).PRL(j,:)) <= (1.4*std(Baseline_Data(i).AD01)))  
            Baseline_Seg(i).PRL(j,:)=Baseline_Segmented(i).PRL(j,:);
        end
        if max((Baseline_Segmented(i).NAC(j,:)) <= (1.4*std(Baseline_Data(i).AD02)))  
            Baseline_Seg(i).NAC(j,:)=Baseline_Segmented(i).NAC(j,:);
        end
        if max((Baseline_Segmented(i).VTA(j,:)) <= (1.4*std(Baseline_Data(i).AD03)))  
            Baseline_Seg(i).VTA(j,:)=Baseline_Segmented(i).VTA(j,:);
        end  
        if max((Baseline_Segmented(i).BLA(j,:)) <= (1.4*std(Baseline_Data(i).AD04)))  
            Baseline_Seg(i).BLA(j,:)=Baseline_Segmented(i).BLA(j,:);
        end  
        if max((Baseline_Segmented(i).HV(j,:)) <= (1.4*std(Baseline_Data(i).AD05)))  
            Baseline_Seg(i).VH(j,:)=Baseline_Segmented(i).HV(j,:); 
        else
            j=j+1;
        end
            
    end
end


for i=1:nanimais_SAL
    for j=1:300
        Baseline_SAL(i).PRL=mean(Baseline_Seg(i).PRL,1);
        Baseline_SAL(i).NAC=mean(Baseline_Seg(i).NAC,1);
        Baseline_SAL(i).VTA=mean(Baseline_Seg(i).VTA,1);
        Baseline_SAL(i).BLA=mean(Baseline_Seg(i).BLA,1);
        Baseline_SAL(i).HV=mean(Baseline_Seg(i).VH,1);
    end
end
clear Baseline_Data Baseline_Segmented Baseline_Seg i 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STRUCT BASELINE_SAL IS THE BASELINE DATA FOR LZE DATA NORMALIZATION %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
cd ..

%% Import Baseline GBR Data

cd ./Baseline_GBR
[File,PathName,FilterIndex] = uigetfile({'*.*','mat(*.*)'}, 'Select GBR Baseline file','MultiSelect','on');
data = [PathName File];
nanimais_GBR=length(File);

%Create a structure based on the parameters defined above
for i=1:nanimais_GBR
    Baseline_Data(i)=importdata([PathName File{:,i}]);
end
clear File PathName FilterIndex data i

%Loop to create 300
for i=1:nanimais_GBR
    Start=1;
    End=2000;
    j=2000;
    for k=1:(Experiment_Time/2) %Where Experiment_Time is the duration of 
        %the electrophysiological data and 2 is the window determined to windowing
        
        %Each line is a 2s window
        Baseline_Segmented(i).PRL(k,:)=Baseline_Data(i).AD01(Start:End,:);
        Baseline_Segmented(i).NAC(k,:)=Baseline_Data(i).AD02(Start:End,:);
        Baseline_Segmented(i).VTA(k,:)=Baseline_Data(i).AD03(Start:End,:);
        Baseline_Segmented(i).BLA(k,:)=Baseline_Data(i).AD04(Start:End,:);
        Baseline_Segmented(i).HV(k,:)=Baseline_Data(i).AD05(Start:End,:);
        Start=Start+j;
        End=End+j;
    end
end
clear Start End i j k 


for i=1:nanimais_GBR
    for j=1:(Experiment_Time/2)
        if max((Baseline_Segmented(i).PRL(j,:)) <= (1.4*std(Baseline_Data(i).AD01)))  
            Baseline_Seg(i).PRL(j,:)=Baseline_Segmented(i).PRL(j,:);
        end
        if max((Baseline_Segmented(i).NAC(j,:)) <= (1.4*std(Baseline_Data(i).AD02)))  
            Baseline_Seg(i).NAC(j,:)=Baseline_Segmented(i).NAC(j,:);
        end
        if max((Baseline_Segmented(i).VTA(j,:)) <= (1.4*std(Baseline_Data(i).AD03)))  
            Baseline_Seg(i).VTA(j,:)=Baseline_Segmented(i).VTA(j,:);
        end  
        if max((Baseline_Segmented(i).BLA(j,:)) <= (1.4*std(Baseline_Data(i).AD04)))  
            Baseline_Seg(i).BLA(j,:)=Baseline_Segmented(i).BLA(j,:);
        end  
        if max((Baseline_Segmented(i).HV(j,:)) <= (1.4*std(Baseline_Data(i).AD05)))  
            Baseline_Seg(i).VH(j,:)=Baseline_Segmented(i).HV(j,:); 
        else
            j=j+1;
        end
            
    end
end


for i=1:nanimais_GBR
        Baseline_GBR(i).PRL=mean(Baseline_Seg(i).PRL);
        Baseline_GBR(i).NAC=mean(Baseline_Seg(i).NAC);
        Baseline_GBR(i).VTA=mean(Baseline_Seg(i).VTA);
        Baseline_GBR(i).BLA=mean(Baseline_Seg(i).BLA);
        Baseline_GBR(i).HV=mean(Baseline_Seg(i).VH);
end
clear Baseline_Data Baseline_Segmented Baseline_Seg i 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% STRUCT BASELINE_GBR IS THE BASELINE DATA FOR LZE DATA NORMALIZATION %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

cd ..
%% PSD on Baseline_Data
WINDOW=2000; %Window length
Fs=1000; %Sampling rate
NFFT=4096; %NFFT is the number of points in a window (2s = 1000 NFFT) // no zero padding

% GBR
for i=1:size(Baseline_SAL,2)
    [Pxx F] = pwelch(Baseline_SAL(i).PRL,WINDOW,[],NFFT,Fs);
    Baseline_SAL(i).PRL=Pxx;
    [Pxx F] = pwelch(Baseline_SAL(i).NAC,WINDOW,[],NFFT,Fs);
    Baseline_SAL(i).NAC=Pxx;
    [Pxx F] = pwelch(Baseline_SAL(i).VTA,WINDOW,[],NFFT,Fs);
    Baseline_SAL(i).VTA=Pxx;
    [Pxx F] = pwelch(Baseline_SAL(i).BLA,WINDOW,[],NFFT,Fs);
    Baseline_SAL(i).BLA=Pxx;
    [Pxx F] = pwelch(Baseline_SAL(i).HV,WINDOW,[],NFFT,Fs);
    Baseline_SAL(i).HV=Pxx;
end

%SAL
for i=1:size(Baseline_GBR,2)
    [Pxx F] = pwelch(Baseline_GBR(i).PRL,WINDOW,[],NFFT,Fs);
    Baseline_GBR(i).PRL=Pxx;
    [Pxx F] = pwelch(Baseline_GBR(i).NAC,WINDOW,[],NFFT,Fs);
    Baseline_GBR(i).NAC=Pxx;
    [Pxx F] = pwelch(Baseline_GBR(i).VTA,WINDOW,[],NFFT,Fs);
    Baseline_GBR(i).VTA=Pxx;
    [Pxx F] = pwelch(Baseline_GBR(i).BLA,WINDOW,[],NFFT,Fs);
    Baseline_GBR(i).BLA=Pxx;
    [Pxx F] = pwelch(Baseline_GBR(i).HV,WINDOW,[],NFFT,Fs);
    Baseline_GBR(i).HV=Pxx;
end

%% Transform Baseline struct data into a cell 
for i=1:nanimais_GBR
    GBR_Baseline{i,1}=Baseline_GBR(i).PRL;  
    GBR_Baseline{i,2}=Baseline_GBR(i).NAC;
    GBR_Baseline{i,3}=Baseline_GBR(i).VTA;  
    GBR_Baseline{i,4}=Baseline_GBR(i).BLA;
    GBR_Baseline{i,5}=Baseline_GBR(i).HV;
end
for i=1:nanimais_SAL
    SAL_Baseline{i,1}=Baseline_SAL(i).PRL;  
    SAL_Baseline{i,2}=Baseline_SAL(i).NAC;
    SAL_Baseline{i,3}=Baseline_SAL(i).VTA;  
    SAL_Baseline{i,4}=Baseline_SAL(i).BLA;
    SAL_Baseline{i,5}=Baseline_SAL(i).HV;
end

% load ('Baseline_Data.mat');

%% Import SAL LZE file (number of animals must be the same)
cd ./LZE_SAL
[File,PathName,FilterIndex] = uigetfile({'*.*','mat(*.*)'}, 'Select SAL LZE file','MultiSelect','on');
data = [PathName File];
nanimais_SAL=length(File);

%Create a structure based on the parameters defined above
for i=1:nanimais_SAL
    LFP_LZE_SAL(i)=importdata([PathName File{:,i}]);
end
clear File PathName FilterIndex data i

%% Import GBR LZE file (number of animals must be the same)
cd 'C:\Users\Galdino\OneDrive\Mestrado Neuroengenharia\Dissertação\Experimento 2 - Eletrofisiologia\Analise_Mania_Eletrofisio\LZE_GBR'
[File,PathName,FilterIndex] = uigetfile({'*.*','mat(*.*)'}, 'Select GBR LZE file','MultiSelect','on');
data = [PathName File];
nanimais_GBR=length(File);

%Create a structure based on the parameters defined above
for i=1:nanimais_SAL
    LFP_LZE_GBR(i)=importdata([PathName File{:,i}]);
end
clear File PathName FilterIndex data i

cd ..


%% Identify Events of LZE_SAL
cd ./CSV_SAL
[File,PathName,FilterIndex] = uigetfile({'*.*','CSV(*.*)'}, 'Selecione o CSV referente ao grupo SAL','MultiSelect','on');
data = [PathName File];

cd ..

for i=1:nanimais_SAL
    CSV_SAL(i).data=importdata([PathName File{:,i}]);
    CSV_SAL(i).data=matrixcorrection(CSV_SAL(i).data);
    CSV_SAL(i).data=CSVreal(CSV_SAL(i).data);
    Events_SAL_CA(i).data=Events_CA(CSV_SAL(i).data);
    Events_SAL_OA(i).data=Events_OA(CSV_SAL(i).data);
end
clear File PathName FilterIndex data i T CSV_SAL 


%% Identify Events of LZE_GBR
cd ./CSV_GBR
[File,PathName,FilterIndex] = uigetfile({'*.*','CSV(*.*)'}, 'Selecione o CSV referente ao grupo GBR ','MultiSelect','on');
data = [PathName File];



for i=1:nanimais_GBR
    CSV_GBR(i).data=importdata([PathName File{:,i}]);
    CSV_GBR(i).data=matrixcorrection(CSV_GBR(i).data);
    CSV_GBR(i).data=CSVreal(CSV_GBR(i).data);
    Events_GBR_CA(i).data=(Events_CA(CSV_GBR(i).data))+(CSV_GBR(1).data(2,1));
    Events_GBR_OA(i).data=(Events_OA(CSV_GBR(i).data))+(CSV_GBR(1).data(2,1));
end
clear File PathName FilterIndex data i T CSV_GBR

%% Windowing the signal

run LFP_Segmentation.m
clear Baseline_GBR Baseline_SAL i z init j last LFPjanela LFPjanelaAll Ev Events_GBR_CA Events_GBR_OA Events_SAL_CA Events_SAL_OA LFP_LZE_SAL LFP_LZE_GBR


%% Power Spectrum Density 

% PSD Parameters
WINDOW=2000; %Window length
Fs=1000; %Sampling rate
NFFT=4096; %NFFT is the number of points in a window (2s = 1000 NFFT) // no zero padding

for i=1:nanimais_GBR
    Pxx=[];
    for j=1:size(LFP_WIND_GBR_CA,2)
        Pxx=[];
        for z=1:size(LFP_WIND_GBR_CA{i, j},1)
            [Pxx F] = pwelch(LFP_WIND_GBR_CA{i, j}(z,:),WINDOW,[],NFFT,Fs);
            PSD_WIND_GBR_CA{i, j}(z,:)=Pxx-SAL_Baseline{i, j}  ;
        end
    end
end

for i=1:nanimais_GBR
    Pxx=[];
    for j=1:size(LFP_WIND_GBR_OA,2)
        Pxx=[];
        for z=1:size(LFP_WIND_GBR_OA{i, j},1)
            [Pxx F] = pwelch(LFP_WIND_GBR_OA{i, j}(z,:),WINDOW,[],NFFT,Fs);
            PSD_WIND_GBR_OA{i, j}(z,:)=Pxx-SAL_Baseline{i, j}  ;
        end
    end
end

for i=1:nanimais_SAL
    Pxx=[];
    for j=1:size(LFP_WIND_SAL_CA,2)
        Pxx=[];
        for z=1:size(LFP_WIND_SAL_CA{i, j},1)
            [Pxx F] = pwelch(LFP_WIND_SAL_CA{i, j}(z,:),WINDOW,[],NFFT,Fs);
            PSD_WIND_SAL_CA{i, j}(z,:)=Pxx-SAL_Baseline{i, j}  ;
        end
    end
end

for i=1:nanimais_SAL
    Pxx=[];
    for j=1:size(LFP_WIND_SAL_OA,2)
        Pxx=[];
        for z=1:size(LFP_WIND_SAL_OA{i, j},1)
            [Pxx F] = pwelch(LFP_WIND_SAL_OA{i, j}(z,:),WINDOW,[],NFFT,Fs);
            PSD_WIND_SAL_OA{i, j}(z,:)=Pxx-SAL_Baseline{i, j}  ;
        end
    end
end

%% Cat all LFP segments
PSD_AllWind_GBR_CA = cellfun(@cell2mat,num2cell(PSD_WIND_GBR_CA,1),'un',0);
PSD_AllWind_GBR_OA = cellfun(@cell2mat,num2cell(PSD_WIND_GBR_OA,1),'un',0);
PSD_AllWind_SAL_CA = cellfun(@cell2mat,num2cell(PSD_WIND_SAL_CA,1),'un',0);
PSD_AllWind_SAL_OA = cellfun(@cell2mat,num2cell(PSD_WIND_SAL_OA,1),'un',0);

%% Computing the PSD for each bandwidth 

%Bandwidth frequencies parameters:
% Delta - 1~4 Hz
% Theta - 4~11 Hz
% Beta - 15~25 Hz
% Low-Gamma - 30~55 Hz
% High-Gamma - 70~100

%Bandwidths index
Delta = (F>=1 & F<=4);
Theta = (F>=4 & F<=11);
Beta = (F>=15 & F<=25);
LowGamma = (F>=30 & F<=55);
HighGamma = (F>=70 & F<=100);

%PSD GBR CLOSED ARM PER BANDWIDTH
for i=1:size(PSD_ALLWind_GBR_CA,2)
    for j=1:size(PSD_ALLWind_GBR_CA{1, 1},1)
        PSD_GBR_CA.Delta(j,i)=trapz(PSD_ALLWind_GBR_CA{1,i}(j,Delta),2);
        PSD_GBR_CA.Theta(j,i)=trapz(PSD_ALLWind_GBR_CA{1,i}(j,Theta),2);
        PSD_GBR_CA.Beta(j,i)=trapz(PSD_ALLWind_GBR_CA{1,i}(j,Beta),2);
        PSD_GBR_CA.LowGamma(j,i)=trapz(PSD_ALLWind_GBR_CA{1,i}(j,LowGamma),2);
        PSD_GBR_CA.HighGamma(j,i)=trapz(PSD_ALLWind_GBR_CA{1,i}(j,HighGamma),2);
    end
end

%% PSD GBR OPEN ARM 
for i=1:size(PSD_ALLWind_GBR_OA,2)
    for j=1:size(PSD_ALLWind_GBR_OA{1, 1},1)
        PSD_GBR_OA.Delta(j,i)=trapz(PSD_ALLWind_GBR_OA{1,i}(j,Delta),2);
        PSD_GBR_OA.Theta(j,i)=trapz(PSD_ALLWind_GBR_OA{1,i}(j,Theta),2);
        PSD_GBR_OA.Beta(j,i)=trapz(PSD_ALLWind_GBR_OA{1,i}(j,Beta),2);
        PSD_GBR_OA.LowGamma(j,i)=trapz(PSD_ALLWind_GBR_OA{1,i}(j,LowGamma),2);
        PSD_GBR_OA.HighGamma(j,i)=trapz(PSD_ALLWind_GBR_OA{1,i}(j,HighGamma),2);
    end
end

%PSD SAL CLOSED ARM PER BANDWIDTH
for i=1:size(PSD_ALLWind_SAL_CA,2)
    for j=1:size(PSD_ALLWind_SAL_CA{1, 1},1)
        PSD_SAL_CA.Delta(j,i)=trapz(PSD_ALLWind_SAL_CA{1,i}(j,Delta),2);
        PSD_SAL_CA.Theta(j,i)=trapz(PSD_ALLWind_SAL_CA{1,i}(j,Theta),2);
        PSD_SAL_CA.Beta(j,i)=trapz(PSD_ALLWind_SAL_CA{1,i}(j,Beta),2);
        PSD_SAL_CA.LowGamma(j,i)=trapz(PSD_ALLWind_SAL_CA{1,i}(j,LowGamma),2);
        PSD_SAL_CA.HighGamma(j,i)=trapz(PSD_ALLWind_SAL_CA{1,i}(j,HighGamma),2);
    end
end

%% PSD SAL OPEN ARM 
for i=1:size(PSD_ALLWind_SAL_OA,2)
    for j=1:size(PSD_ALLWind_SAL_OA{1, 1},1)
        PSD_SAL_OA.Delta(j,i)=trapz(PSD_ALLWind_SAL_OA{1,i}(j,Delta),2);
        PSD_SAL_OA.Theta(j,i)=trapz(PSD_ALLWind_SAL_OA{1,i}(j,Theta),2);
        PSD_SAL_OA.Beta(j,i)=trapz(PSD_ALLWind_SAL_OA{1,i}(j,Beta),2);
        PSD_SAL_OA.LowGamma(j,i)=trapz(PSD_ALLWind_SAL_OA{1,i}(j,LowGamma),2);
        PSD_SAL_OA.HighGamma(j,i)=trapz(PSD_ALLWind_SAL_OA{1,i}(j,HighGamma),2);
    end
end

%% Realocating values to export SPSS columns with PSD's
% %PRL 
% SPSS.PRL_GBR_CA=[PSD_GBR_CA.Delta(:,1), PSD_GBR_CA.Theta(:,1) PSD_GBR_CA.Beta(:,1), PSD_GBR_CA.LowGamma(:,1), PSD_GBR_CA.HighGamma(:,1)];
% SPSS.PRL_GBR_OA=[PSD_GBR_OA.Delta(:,1), PSD_GBR_OA.Theta(:,1) PSD_GBR_OA.Beta(:,1), PSD_GBR_OA.LowGamma(:,1), PSD_GBR_OA.HighGamma(:,1)];
% SPSS.PRL_SAL_CA=[PSD_SAL_CA.Delta(:,1), PSD_SAL_CA.Theta(:,1) PSD_SAL_CA.Beta(:,1), PSD_SAL_CA.LowGamma(:,1), PSD_SAL_CA.HighGamma(:,1)];
% SPSS.PRL_SAL_OA=[PSD_SAL_OA.Delta(:,1), PSD_SAL_OA.Theta(:,1) PSD_SAL_OA.Beta(:,1), PSD_SAL_OA.LowGamma(:,1), PSD_SAL_OA.HighGamma(:,1)];
% 
% %NAC
% SPSS.NAC_GBR_CA=[PSD_GBR_CA.Delta(:,2), PSD_GBR_CA.Theta(:,2) PSD_GBR_CA.Beta(:,2), PSD_GBR_CA.LowGamma(:,2), PSD_GBR_CA.HighGamma(:,2)];
% SPSS.NAC_GBR_OA=[PSD_GBR_OA.Delta(:,2), PSD_GBR_OA.Theta(:,2) PSD_GBR_OA.Beta(:,2), PSD_GBR_OA.LowGamma(:,2), PSD_GBR_OA.HighGamma(:,2)];
% SPSS.NAC_SAL_CA=[PSD_SAL_CA.Delta(:,2), PSD_SAL_CA.Theta(:,2) PSD_SAL_CA.Beta(:,2), PSD_SAL_CA.LowGamma(:,2), PSD_SAL_CA.HighGamma(:,2)];
% SPSS.NAC_SAL_OA=[PSD_SAL_OA.Delta(:,2), PSD_SAL_OA.Theta(:,2) PSD_SAL_OA.Beta(:,2), PSD_SAL_OA.LowGamma(:,2), PSD_SAL_OA.HighGamma(:,2)];
% 
% %VTA
% SPSS.VTA_GBR_CA=[PSD_GBR_CA.Delta(:,3), PSD_GBR_CA.Theta(:,3) PSD_GBR_CA.Beta(:,3), PSD_GBR_CA.LowGamma(:,3), PSD_GBR_CA.HighGamma(:,3)];
% SPSS.VTA_GBR_OA=[PSD_GBR_OA.Delta(:,3), PSD_GBR_OA.Theta(:,3) PSD_GBR_OA.Beta(:,3), PSD_GBR_OA.LowGamma(:,3), PSD_GBR_OA.HighGamma(:,3)];
% SPSS.VTA_SAL_CA=[PSD_SAL_CA.Delta(:,3), PSD_SAL_CA.Theta(:,3) PSD_SAL_CA.Beta(:,3), PSD_SAL_CA.LowGamma(:,3), PSD_SAL_CA.HighGamma(:,3)];
% SPSS.VTA_SAL_OA=[PSD_SAL_OA.Delta(:,3), PSD_SAL_OA.Theta(:,3) PSD_SAL_OA.Beta(:,3), PSD_SAL_OA.LowGamma(:,3), PSD_SAL_OA.HighGamma(:,3)];
% 
% %BLA
% SPSS.BLA_GBR_CA=[PSD_GBR_CA.Delta(:,4), PSD_GBR_CA.Theta(:,4) PSD_GBR_CA.Beta(:,4), PSD_GBR_CA.LowGamma(:,4), PSD_GBR_CA.HighGamma(:,4)];
% SPSS.BLA_GBR_OA=[PSD_GBR_OA.Delta(:,4), PSD_GBR_OA.Theta(:,4) PSD_GBR_OA.Beta(:,4), PSD_GBR_OA.LowGamma(:,4), PSD_GBR_OA.HighGamma(:,4)];
% SPSS.BLA_SAL_CA=[PSD_SAL_CA.Delta(:,4), PSD_SAL_CA.Theta(:,4) PSD_SAL_CA.Beta(:,4), PSD_SAL_CA.LowGamma(:,4), PSD_SAL_CA.HighGamma(:,4)];
% SPSS.BLA_SAL_OA=[PSD_SAL_OA.Delta(:,4), PSD_SAL_OA.Theta(:,4) PSD_SAL_OA.Beta(:,4), PSD_SAL_OA.LowGamma(:,4), PSD_SAL_OA.HighGamma(:,4)];
% 
% %VH
% SPSS.VH_GBR_CA=[PSD_GBR_CA.Delta(:,5), PSD_GBR_CA.Theta(:,5) PSD_GBR_CA.Beta(:,5), PSD_GBR_CA.LowGamma(:,5), PSD_GBR_CA.HighGamma(:,5)];
% SPSS.VH_GBR_OA=[PSD_GBR_OA.Delta(:,5), PSD_GBR_OA.Theta(:,5) PSD_GBR_OA.Beta(:,5), PSD_GBR_OA.LowGamma(:,5), PSD_GBR_OA.HighGamma(:,5)];
% SPSS.VH_SAL_CA=[PSD_SAL_CA.Delta(:,5), PSD_SAL_CA.Theta(:,5) PSD_SAL_CA.Beta(:,5), PSD_SAL_CA.LowGamma(:,5), PSD_SAL_CA.HighGamma(:,5)];
% SPSS.VH_SAL_OA=[PSD_SAL_OA.Delta(:,5), PSD_SAL_OA.Theta(:,5) PSD_SAL_OA.Beta(:,5), PSD_SAL_OA.LowGamma(:,5), PSD_SAL_OA.HighGamma(:,5)];

